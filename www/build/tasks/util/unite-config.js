/**
 * Gulp utils for unite configuration.
 */
const fs = require("fs");
const minimist = require("minimist");
const path = require("path");
const util = require("util");
const display = require("./display");
const envUtil = require("./env-util");
async function getUniteConfig() {
    let uc = envUtil.get("uniteConfig");
    if (uc) {
        return uc;
    } else {
        try {
            const data = await util.promisify(fs.readFile)("../unite.json");
            uc = JSON.parse(data.toString());
            envUtil.set("uniteConfig", uc);
            return uc;
        } catch (err) {
            display.error("Reading unite.json", err);
            process.exit(1);
            return undefined;
        }
    }
}
exports.getUniteConfig = getUniteConfig;
async function setUniteConfig(uniteConfig) {
    try {
        envUtil.set("uniteConfig", uniteConfig);
        await util.promisify(fs.writeFile)("../unite.json", JSON.stringify(uniteConfig, undefined, "\t"));
    } catch (err) {
        display.error("Writing unite-theme.json", err);
        process.exit(1);
    }
}
exports.setUniteConfig = setUniteConfig;
async function getUniteThemeConfig(uniteConfig) {
    try {
        const data = await util.promisify(fs.readFile)(path.join(uniteConfig.dirs.www.assetsSrc, "/theme/unite-theme.json"));
        return JSON.parse(data.toString());
    } catch (err) {
        display.error("Reading unite-theme.json", err);
        process.exit(1);
        return undefined;
    }
}
exports.getUniteThemeConfig = getUniteThemeConfig;
async function setUniteThemeConfig(uniteConfig, uniteThemeConfig) {
    try {
        await util.promisify(fs.writeFile)(path.join(uniteConfig.dirs.www.assetsSrc, "/theme/unite-theme.json"), JSON.stringify(uniteThemeConfig, undefined, "\t"));
    } catch (err) {
        display.error("Writing unite-theme.json", err);
        process.exit(1);
    }
}
exports.setUniteThemeConfig = setUniteThemeConfig;

function getBuildConfiguration(uniteConfig, showInfo) {
    const knownOptions = {
        default: {
            buildConfiguration: "dev"
        },
        string: ["buildConfiguration"]
    };
    const options = minimist(process.argv.slice(2), knownOptions);
    let buildConfiguration = null;
    if (uniteConfig &&
        uniteConfig.buildConfigurations &&
        uniteConfig.buildConfigurations[options.buildConfiguration]) {
        buildConfiguration = uniteConfig.buildConfigurations[options.buildConfiguration];
        if (showInfo) {
            display.info("Build Configuration", options.buildConfiguration);
        }
    } else {
        display.error(`Unknown build configuration '${options.buildConfiguration}' in unite.json, aborting.`);
        process.exit(1);
    }
    buildConfiguration = buildConfiguration || {};
    if (buildConfiguration.bundle === undefined) {
        buildConfiguration.bundle = false;
    }
    if (buildConfiguration.sourcemaps === undefined) {
        buildConfiguration.sourcemaps = true;
    }
    if (buildConfiguration.minify === undefined) {
        buildConfiguration.minify = false;
    }
    if (buildConfiguration.pwa === undefined) {
        buildConfiguration.pwa = false;
    }
    buildConfiguration.name = options.buildConfiguration;
    if (showInfo) {
        display.info("Sourcemaps", buildConfiguration.sourcemaps);
        display.info("Minify", buildConfiguration.minify);
        display.info("Bundle", buildConfiguration.bundle);
        display.info("Pwa", buildConfiguration.pwa);
    }
    return buildConfiguration;
}
exports.getBuildConfiguration = getBuildConfiguration;

function extensionMap(extensions) {
    if (extensions.length === 1) {
        return extensions[0];
    } else {
        return `{${extensions.join(",")}}`;
    }
}
exports.extensionMap = extensionMap;
// Generated by UniteJS
