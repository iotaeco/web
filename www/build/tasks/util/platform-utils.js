/**
 * Gulp utilities for platform.
 */
const gulp = require("gulp");
const path = require("path");
const asyncUtil = require("./async-util");
const clientPackages = require("./client-packages");
const display = require("./display");
const themeUtils = require("./theme-utils");
async function listFiles(uniteConfig, buildConfiguration) {
    const bundleExists = await asyncUtil.fileExists(path.join(uniteConfig.dirs.www.dist, "app-bundle.js"));
    if (buildConfiguration.bundle && !bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.name}' which is bundled,` +
            " but the dist folder contains a non bundled build.");
        display.error("Please add the --buildConfiguration argument to this task," +
            " or rebuild the app with a different configuration.");
        process.exit(1);
    } else if (!buildConfiguration.bundle && bundleExists) {
        display.error(`You have specified configuration '${buildConfiguration.name}' which is not bundled,` +
            " but the dist folder contains a bundled build.");
        display.error("Please add the --buildConfiguration argument to this task," +
            " or rebuild the app with a different configuration.");
        process.exit(1);
    }
    let files = [{
            src: path.join("./", "index.html")
        },
        {
            src: path.join("./", "service-worker.js")
        },
        {
            src: path.join(uniteConfig.dirs.www.dist, "**/*")
        },
        {
            src: path.join(uniteConfig.dirs.www.cssDist, "**/*")
        },
        {
            src: path.join(uniteConfig.dirs.www.assets, "**/*")
        },
        {
            src: path.join(uniteConfig.dirs.www.assetsSrc, "root/**/*"),
            moveToRoot: true
        }
    ];
    const packageFiles = clientPackages.getDistFiles(uniteConfig, ["app", "both"], buildConfiguration.bundle, buildConfiguration.minify);
    packageFiles.forEach((packageFile) => {
        files = files.concat({
            src: packageFile
        });
    });
    files = files.concat(clientPackages.getAssets(uniteConfig).map(a => ({
        src: a
    })));
    return files;
}
exports.listFiles = listFiles;
async function gatherFiles(uniteConfig, buildConfiguration, packageJson, platformName, gatherRoot) {
    display.info("Gathering Files", platformName);
    const files = await listFiles(uniteConfig, buildConfiguration);
    display.info("Destination", gatherRoot);
    for (let i = 0; i < files.length; i++) {
        const fileDest = files[i].moveToRoot ? gatherRoot :
            path.join(gatherRoot, files[i].src.indexOf("**") > 0 ?
                files[i].src.replace(/\*\*[/\\]\*(.*)/, "") : path.dirname(files[i].src));
        display.info("Copying Files", files[i].src);
        display.info("To", fileDest);
        await asyncUtil.stream(gulp.src(files[i].src, {
                dot: true
            })
            .pipe(gulp.dest(fileDest)));
    }
    if (buildConfiguration.pwa) {
        await themeUtils.buildPwa(uniteConfig, buildConfiguration, packageJson, files, gatherRoot, true);
    }
}
exports.gatherFiles = gatherFiles;

function getConfig(uniteConfig, platformName) {
    if (uniteConfig.platforms &&
        uniteConfig.platforms[platformName]) {
        return uniteConfig.platforms[platformName];
    } else {
        return {};
    }
}
exports.getConfig = getConfig;
// Generated by UniteJS
