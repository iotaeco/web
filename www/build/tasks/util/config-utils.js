/**
 * Gulp utils for config.
 */
const fs = require("fs");
const path = require("path");
const util = require("util");
const asyncUtil = require("./async-util");
const display = require("./display");

function createBuildNumber(now) {
    return now.getFullYear().toString() +
        `0${now.getUTCMonth() + 1}`.substr(-2) +
        `0${now.getUTCDate()}`.substr(-2) +
        `0${now.getUTCHours()}`.substr(-2) +
        `0${now.getUTCMinutes()}`.substr(-2) +
        `0${now.getUTCSeconds()}`.substr(-2);
}
async function create(uniteConfig, buildConfiguration, packageJson) {
    const now = new Date();
    const rootConfig = {
        config: {},
        configName: buildConfiguration.name,
        bundle: buildConfiguration.bundle,
        minify: buildConfiguration.minify,
        pwa: buildConfiguration.pwa,
        packageVersion: packageJson.version,
        uniteVersion: uniteConfig.uniteVersion,
        buildDateTime: now.getTime(),
        buildNumber: process.env.BUILD_NUMBER ||
            process.env.BUILD_TAG ||
            process.env.CI_BUILD_NUMBER ||
            process.env.CI_BUILD_TAG ||
            process.env.TRAVIS_BUILD_NUMBER ||
            process.env.CIRCLE_BUILD_NUM ||
            process.env.DRONE_BUILD_NUMBER ||
            process.env.APPVEYOR_BUILD_NUMBER ||
            process.env.BUILD_BUILDNUMBER ||
            createBuildNumber(now)
    };
    const readFileAsync = util.promisify(fs.readFile);
    const commonFilename = path.join(uniteConfig.dirs.www.configuration, "common.json");
    const commonExists = await asyncUtil.fileExists(commonFilename);
    if (commonExists) {
        try {
            const commonContents = await readFileAsync(commonFilename);
            const objCommonConfig = JSON.parse(commonContents.toString());
            Object.assign(rootConfig.config, objCommonConfig);
        } catch (err) {
            display.error(`Reading ${commonFilename} failed`, err);
            process.exit(1);
        }
    }
    const configFilename = path.join(uniteConfig.dirs.www.configuration, `${rootConfig.configName}.json`);
    const configExists = await asyncUtil.fileExists(configFilename);
    if (configExists) {
        try {
            const configContents = await readFileAsync(configFilename);
            const objConfig = JSON.parse(configContents.toString());
            Object.assign(rootConfig.config, objConfig);
        } catch (err) {
            display.error(`Reading ${configFilename} failed`, err);
            process.exit(1);
        }
    }
    return rootConfig;
}
exports.create = create;
// Generated by UniteJS
