/**
 * Gulp tasks for building TypeScript.
 */
const gulp = require("gulp");
const sourcemaps = require("gulp-sourcemaps");
const typescript = require("gulp-typescript");
const uglify = require("gulp-uglify");
const gutil = require("gulp-util");
const path = require("path");
const asyncUtil = require("./util/async-util");
const display = require("./util/display");
const errorUtil = require("./util/error-util");
const uc = require("./util/unite-config");

gulp.task("build-transpile", async () => {
    display.info("Running", "TypeScript");
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, true);
    const tsProject = typescript.createProject("tsconfig.json");
    let errorCount = 0;
    return asyncUtil.stream(gulp.src(path.join(uniteConfig.dirs.www.src, `**/*.${uc.extensionMap(uniteConfig.sourceExtensions)}`))
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.init() : gutil.noop())

        .pipe(tsProject(typescript.reporter.nullReporter()))
        .on("error", (err) => {
            display.error(err.message);
            errorCount++;
        })
        .on("error", errorUtil.handleErrorEvent)
        .js

        .pipe(buildConfiguration.minify ? uglify()
            .on("error", (err) => {
                display.error(err.toString());
            }) : gutil.noop())
        .pipe(buildConfiguration.sourcemaps ?
            sourcemaps.mapSources((sourcePath) => `./src/${sourcePath}`) : gutil.noop())
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({
            includeContent: true,
            sourceRoot: ""
        }) : gutil.noop())
        .pipe(gulp.dest(uniteConfig.dirs.www.dist))
        .on("end", () => {
            errorUtil.handleErrorCount(errorCount);
        }));
});
// Generated by UniteJS
