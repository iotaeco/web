/**
 * Gulp tasks for web platform.
 */
const del = require("del");
const gulp = require("gulp");
const path = require("path");
const runSequence = require("run-sequence");
const util = require("util");
const asyncUtil = require("./util/async-util");
const display = require("./util/display");
const packageConfig = require("./util/package-config");
const platformUtils = require("./util/platform-utils");
const uc = require("./util/unite-config");
gulp.task("platform-web-package", async () => {
    try {
        await util.promisify(runSequence)("platform-web-clean", "platform-web-gather", "platform-web-compress");
    } catch (err) {
        display.error("Unhandled error during task", err);
        process.exit(1);
    }
});
gulp.task("platform-web-clean", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const packageJson = await packageConfig.getPackageJson();
    const toClean = [
        path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}/web/**/*`),
        path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}_web.zip`)
    ];
    display.info("Cleaning", toClean);
    return del(toClean, {
        force: true
    });
});
gulp.task("platform-web-gather", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);
    const packageJson = await packageConfig.getPackageJson();
    const platformName = "Web";
    const gatherRoot = path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}/${platformName.toLowerCase()}/`);
    await platformUtils.gatherFiles(uniteConfig, buildConfiguration, packageJson, platformName, gatherRoot);
});
gulp.task("platform-web-compress", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const packageJson = await packageConfig.getPackageJson();
    display.info("Compressing Files", "Web");
    const zipName = `${packageJson.version}_web.zip`;
    display.info("To File", zipName);
    return asyncUtil.zipFolder(path.join("../", uniteConfig.dirs.packagedRoot, `/${packageJson.version}/web/`), path.join("../", uniteConfig.dirs.packagedRoot, zipName));
});
// Generated by UniteJS
