/**
 * Gulp tasks for version.
 */
const gulp = require("gulp");
const minimist = require("minimist");
const display = require("./util/display");
const packageConfig = require("./util/package-config");
gulp.task("version", async () => {
    const packageJson = await packageConfig.getPackageJson();
    const knownOptions = {
        default: {
            part: "",
            mode: "",
            value: ""
        },
        string: [
            "part", "mode", "value"
        ]
    };
    const options = minimist(process.argv.slice(2), knownOptions);
    const parts = ["major", "minor", "patch"];
    const modes = ["set", "inc"];
    const partIndex = parts.indexOf(options.part);
    const modeIndex = modes.indexOf(options.mode);
    if (options.part === "" && options.mode === "") {
        display.info("Current Version", packageJson.version);
    } else if (partIndex >= 0) {
        if (modeIndex >= 0) {
            const versionParts = packageJson.version.split(".");
            if (versionParts.length === 3) {
                display.info("Current Version", packageJson.version);
                display.info("Part", options.part);
                display.info("Mode", options.mode);
                if (modeIndex === 0) {
                    if (options.value === null || options.value === undefined || options.value.length === 0) {
                        display.error("The value parameter must be set");
                        process.exit(1);
                    } else {
                        display.info("Value", options.value);
                        versionParts[partIndex] = options.value;
                    }
                } else {
                    let partVer = parseInt(versionParts[partIndex], 10);
                    if (isNaN(partVer)) {
                        display.error("The version can only be incremented when it is numeric.");
                        process.exit(1);
                    } else {
                        versionParts[partIndex] = (++partVer).toString();
                    }
                }
                packageJson.version = versionParts.join(".");
                display.info("New Version", packageJson.version);
                await packageConfig.setPackageJson(packageJson);
            } else {
                display.error("Expecting package.json version to be format MAJOR.MINOR.PATCH");
                process.exit(1);
            }
        } else {
            display.error(`Expecting mode to be [${modes.join(", ")}].`);
            process.exit(1);
        }
    } else {
        display.error(`Expecting part to be [${parts.join(", ")}].`);
        process.exit(1);
    }
});
// Generated by UniteJS
